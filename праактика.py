#Основная инструкция:
#Вложенный блок инструкции
# a = 1; b = 2; print(a, b)
# if ('a' == 1 and b == 2 and
#     c == 3 and d == 4):  #не забываем про двоеточие
#       print('spam' * 3)
 #from tarfile import True

# if (x > y):print(x)


# print(2 + 3)
# print("Hello")
 #Ошибка
# print(2 + 3)
#     print("Hello")

  # УСЛОВНАЯ КОНСТРУКЦИЯ 'if'
# if 1 < 2:
#     print("Hello")

#Метод print
# print("Hello word")

#Если хотим вывести несколько значений на консоль
# то можем передать их в функцию print  через запятую
# print("Full name:","Tom", "Smith"  )

#Если print отвечает за вывод,
# то функция input отвечает за ввод информации.
# В качестве необязательного параметра эта функция принимает к вводу и возвращает
# введенную строку, мы можем сохранить в переменную:
# name = input("введите имя ")
# print("Привет", name)

 #   """ ПЕРЕМЕННЫЕ И ТИПЫ ДАННЫХ"""
#Переменные предназначены для хранения данных. Название переменной в Python должно
# начинаться с алфавитного символа или со знака подчеркивания и может содержать алфавитно-
# цифровые символы и знак подчеркивания. И кроме того, название переменной не должно
# совпадать с названием ключевых слов языка Python. Ключевых слов не так много, их легко запомнить:

"1 False      await      else       import     pass"
"2 None       break      except     in         raise"
"3 True       class      finally    is         return"
"4 and        continue   for        lambda     try"
"5 as         def        from       nonlocal   while"
"6 assert     del        global     not        with"
"7 async      elif       if         or         yield"

#  пр создоем переменную
name = "Tom"
 #name переменная, которая хранит строку "Tom"
# В пайтоне применяется два типа наименования переменных:
# camel case и underscore notation.
#
# Camel case подразумевает, что каждое новое подслово
# в наименовании переменной начинается
# с большой буквы. Например:
userName = "Tom"
# Underscore notation подразумевает, что подсловав наименовании
# переменной разделяются знаком подчеркивания. Например:
user_name = "Tom"
# И также надо учитывать регистрозависимость, поэтому переменные
# name и Name будут представлять разные объекты
#две разнные переменные
# name = "Tome"
# Name = "Tom"
# Определив переменную, мы можем использовать в программе.
# Например, попытаться вывести ее содержимое на консоль
# с помощью встроенной функции print:
# name = "naziko "  #определение переменной name
# print(name)  #ввывод значение переменной name на консоль

# Отличительной особенностью переменной является то,
# что мы можем менять ее значение в течение работы программы:
# name = "naziko"  # переменной name равна "naziko"
# print(name)    # выводит: naziko
# name = "nazik"   # меняем значение на "nazik"
# print(name)   # выводит: nazik

#ТИПЫ ДАННЫХ
#БАЗОВЫЕ ТИПЫ ДАННЫХ:bool, int, float, complex, str

#ЛОГИЧЕСКИЕ ЗНАЧЕНИЯ
# Тип bool предстовляет 2 логические значения это True(верно,истина ) и False(неверно,ложь).
# Значение True  служит чтоыбы показать, что что-то истиео или верно.
# Значение False служит наоборот показывает , что что-то ложно или неверно.
#ПР
# isMarried = False
# print(isMarried)
#
# isAlive = True
# print(isAlive)

 #  ЦЕЛЫЕ ЧИСЛА
 #Тип int предстовляет целое число,пр, 1,4,8,50.пр
# age = 17
# print("Возраст", age) #Возраст:17
#
# count = 11
# print("Количество", 11) #Количество:11

# Для указания, что число представляет двоичную систему,
# перед числом ставится префикс 0b: 2
# a = 0b11
# b = 0b1011
# c = 0b100001
# print(a)  # 3 в десятичной системе
# print(b)  # 11 в десятичной системе
# print(c)  # 33 в десятичной системе

# Для указания, что число представляет восьмеричную систему,
# перед числом ставится префикс 0o:8
# a = 0o7
# b = 0o11
# c = 0o17
# print(a)
# print(b)
# print(c)

# Для указания, что число представляет шестнадцатеричную систему,
# перед числом ставится префикс 0x:
# a = 0x0A
# b = 0xFF
# c = 0xA1
# # print(a) # 10 в десятичной системе
# print(b) # 255 в десятичной системе
# print(c) #161 в десятичной системе

# ДРОБНЫЕ ЧИСЛА
# Тип float предстовляет число с плавающей точкой, пр,1.2 или 34.27.
# В качестве разделителя целой и дробной частей используется точка.
# height = 1.65
# pi = 3.14
# weight = 58.
# print(height) # рост 1.65
# print(pi)     # pi 3.14
# print(weight) # вес 58.0

# Число с плавающей точкой можно определять в экспоненциальной записи:
# x = 3.9e3
# print(x) #3900.0

# x = 3.9e-3
# print(x) #0.0039
# x = 4.9e-2
# print(x) #0.049

#   КОМПЛЕКСНЫЕ ЧИСЛА
# Тип complex предстовляет комплексные числа в формате вещественная_часть+мнимая_частьj -
# после мнимой части указывается суффикс j
#
# complexNamber = 1+2j
# print(complexNamber) #(1+2j)

#  СТРОКИ
# Тип str представляет строки. Строка представляет последовательность символов,
# заключенную в одинарные или двойные кавычки, например "hello" и 'hello'.
# В Python 3.x строки представляют набор символов в кодировке Unicode
#
# message = "Hello word"
# print(message) #Hello word
#
# name = 'naziko'
# print(name) #naziko

# При этом, если строка имеет много символов, ее можно разбить на части и эти части разместить на разных строках кода.
# В этом случае вся строка заключается в круглые скобки, а ее отдельные части - в кавычки:
# text = ("повторение" "мать учение")
# print(text)

# Если же мы хотим определить многострочный текст,
# то такой текст заключается в тройные двойные или одинарные кавычки:
# '''
# Это комментарий
# '''
# text = '''со временим через
# трудности через повторения ты
# все сможешь
# '''
# print(text)

#УПРОВЛЯЮЩИЕ ПОСЛЕДОВАТЕЛЬНОСТИ В СТРОКЕ
#Строка может содержать ряд специальных символов
# - управляющих последовательностей. Некоторые из них:

# \\: позволяет добавить внутрь строки слеш
# \': позволяет добавить внутрь строки одинарную кавычку
# \": позволяет добавить внутрь строки двойную кавычку
#\n: осуществляет переход на новую строку
#\t: добавляет табуляцию (4 отступа)

# ПРИМЕНИЯ НЕСКОЛЬКО ПОСЛЕДОВАТЕЛЬНОСТЕЙ
# text = "message:\n\"Hello World\""
# print(text)

# Хотя подобные последовательности могут нам помочь в некоторых делах,
# например, поместить в строку кавычку, сделать табуляцию, перенос на другую строку.
# Но они также могут и мешать. Например:
# path = "C:\python\name.txt"
# print(path) #ame

# Здесь переменная path содержит некоторый путь к файлу. Однако внутри строки встречаются символы
# "\n", которые будут интерпретированы как управляющая последовательность.
# Так, мы получим следующий консольный вывод:

#Чтобы избежать подобной ситуации, перед строкой ставится символ r
# path = r"C:\python\name.txt"
# print(path) #name

#ВСТАВКА ЗНАЧЕНИЙ В СТРОКУ
# Python позволяет встравивать в строку значения других переменных.
# Для этого внутри строки переменные размещаются в фигурных скобках {},
# а перед всей строкой ставится символ f:
# userName = "naziko"
# userAge = 17
# user = f"name: {userName}, age: {userAge}"
# print(user) #name: naziko, age: 17

#ДИНАМИЧЕСКАЯ ТИПИЗАЦИЯ
#Python является языком с динамической типизацией.
# А это значит, что переменная не привязана жестко к определенному типу.

#Тип переменной определяется исходя из значения, которое ей присвоено.
# Так, при присвоении строки в двойных или одинарных кавычках переменная имеет тип str.
# При присвоении целого числа Python автоматически определяет тип переменной как int.
# Чтобы определить переменную как объект float, ей присваивается дробное число,
# в котором разделителем целой и дробной части является точка.

# При этом в процессе работы программы мы можем изменить тип переменной,
# присвоив ей значение другого типа:
# userId = "abs" #тип str
# print(userId)
#
# userId = 234 # тип int
# print(userId)
#
# # С помощью встроенной функции type() динамически можно узнать текущий тип переменной:
# userId = "abs" #Тип str
# print(type(userId)) #<class 'str'>
#
# userId = 234 #Тип int
# print(type(userId)) #<class 'int'>

    # """ЦИКЛЫ """
    # while
    # for
#ЦИКЛ while
#Цикл while проверяет истинность некоторого условия,
# и если условие истинно, то выполняет инструкции цикла
#Определения :
# while условное_вырожение:
    # инструкции

# После ключевого слова while указывается условное выражение,
# и пока это выражение возвращает значение True, будет выполняться блок инструкций, который идет далее.
# Все инструкции, которые относятся к циклу while,
# располагаются на последующих строках и должны иметь отступ от начала ключевого слова while.
number = 1

while number < 5:
    print(f"number = {number}")
    number +=1
print("Работа программы завершена ")

# В данном случае цикл while будет выполняться, пока переменная number меньше 5.
# Сам блок цикла состоит из двух инструкций:
print(f"number = {number}")
number += 1


